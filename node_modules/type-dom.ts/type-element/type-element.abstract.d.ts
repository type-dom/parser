import { Subscription } from 'rxjs';
import { TypeNode } from '../type-node/type-node.abstract';
import { ITypeNode } from '../type-node/type-node.interface';
import { TextNode } from '../text-node/text-node.class';
import { Display } from '../style/style.enum';
import { IStyle } from '../style/style.interface';
import { ITypeAttribute, IBoundBox, ITypeElement, ITypeProperty } from './type-element.interface';
export declare abstract class TypeElement extends TypeNode implements ITypeElement {
    abstract className: string;
    abstract parent: TypeElement;
    abstract dom: HTMLElement | SVGElement;
    propObj: ITypeProperty;
    childNodes: TypeNode[];
    events: Subscription[];
    protected constructor(nodeName: string);
    get length(): number;
    get index(): number;
    get attrObj(): Partial<ITypeAttribute>;
    get styleObj(): Partial<IStyle>;
    get firstChild(): TypeNode;
    get lastChild(): TypeNode;
    get id(): string;
    setAttrId(id: string): void;
    addAttrId(id: string): void;
    renderAttrId(id: string): void;
    setPropObj(propObj: ITypeProperty): void;
    setStyleObj(styles: Partial<IStyle>): TypeElement;
    addStyleObj(styles: Partial<IStyle>): void;
    renderStyleObj(styles: Partial<IStyle>): void;
    setStyle(key: keyof IStyle, value: string | number | boolean): void;
    addStyle(key: keyof IStyle, value: string | number | boolean): void;
    renderStyle(key: keyof IStyle, value: string | number | boolean): void;
    removeStyle(key: keyof IStyle): TypeElement;
    show(mode?: keyof typeof Display): void;
    hide(): void;
    setAttrObj(attrObj: Partial<ITypeAttribute>): TypeElement;
    addAttrObj(attrObj: Partial<ITypeAttribute>): TypeElement;
    renderAttrObj(attrObj: Partial<ITypeAttribute>): TypeElement;
    setAttribute(key: string, value: string | number | boolean): TypeElement;
    addAttribute(key: string, value: string | number | boolean): void;
    renderAttribute(key: string, value: string | number | boolean): void;
    setAttrName(value: string): TypeElement;
    addAttrName(value: string): void;
    renderAttrName(value: string): void;
    removeAttribute(key: string): TypeElement;
    addClassName(className: string): TypeElement;
    removeClassName(className: string): TypeElement;
    appendChild(newChild: TypeNode): void;
    unshiftChild(newChild: TypeNode): void;
    addChild(newChild: TypeNode): void;
    addChildren(...newChildren: TypeNode[]): void;
    renderChild(newChild: TypeNode): void;
    insertChild(newChild: TypeElement | TextNode, index: number): HTMLElement | SVGElement | Text;
    removeChildAtIndex(index: number, length?: number): void;
    removeChildDom(index: number, length?: number): void;
    removeFromParent(): void;
    clearChildDom(): void;
    clearChildNodes(): void;
    removeDom(): void;
    findChildAtIndex(index: number): TypeNode | null;
    findChildIndex(child: TypeElement | TextNode): number;
    removeEvents(): void;
    clearEvents(): void;
    get boundBox(): IBoundBox;
    setConfig(config: any): void;
    createInstance(literal: ITypeElement): void;
    createItem(parent: TypeElement, node: ITypeNode): TypeNode;
    render(): void;
}
