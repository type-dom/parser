import { TypeHtml } from '../type-html/type-html.abstract';
export class TypeComponent extends TypeHtml {
    constructor(nodeName) {
        super(nodeName);
        this.childNodes = [];
    }
    createItem(parent, node) {
        console.log('type-component createItem . ');
        if (node.TypeClass === undefined) {
            throw Error('node.TypeClass is undefined . ');
        }
        const item = new node.TypeClass();
        item.parent = parent;
        console.log('item is ', item);
        if (node.propObj) {
            item.addStyleObj(node.propObj.styleObj);
            item.addAttrObj(node.propObj.attrObj);
        }
        if (node.config) {
            item.setConfig(node.config);
        }
        return item;
    }
    createItems(parent, nodes) {
        console.log('type-component createItems . ');
        const items = [];
        for (const node of nodes) {
            if (node.TypeClass === undefined) {
                console.error('node.TypeClass is undefined . ');
                continue;
            }
            const item = this.createItem(parent, node);
            if (item) {
                items.push(item);
            }
        }
        return items;
    }
}
