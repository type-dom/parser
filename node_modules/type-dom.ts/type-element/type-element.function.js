import { TypeElement } from './type-element.abstract';
export function setStyles(dom, styleObj) {
    for (const key in styleObj) {
        if (Object.hasOwnProperty.call(styleObj, key)) {
            dom.style[key] = styleObj[key];
        }
    }
}
export function setAttributes(dom, attrObj) {
    for (const attr in attrObj) {
        if (Object.hasOwnProperty.call(attrObj, attr)) {
            dom.setAttribute(attr, attrObj[attr]);
        }
    }
}
export function pxToRem(str) {
    const reg = /(\:|: )+(\d)+(px)/gi;
    return str.replace(reg, function (char) {
        const x = char.replace(/(\:|: )/, '').replace(/px/i, '');
        return ':' + parseFloat(x) / 100 + 'rem';
    });
}
export function getScroll(area) {
    const body = {
        top: document.body.scrollTop > 0
            ? document.body.scrollTop
            : document.documentElement.scrollTop,
        left: document.body.scrollLeft > 0
            ? document.body.scrollLeft
            : document.documentElement.scrollLeft,
    };
    return {
        y: area && area.scrollTop >= 0 ? area.scrollTop : body.top,
        x: area && area.scrollLeft >= 0 ? area.scrollLeft : body.left,
    };
}
export function toJSON(element) {
    return {
        nodeName: element.nodeName,
        className: element.className,
        propObj: {
            styleObj: Object.assign({}, element.styleObj),
            attrObj: Object.assign({}, element.attrObj),
        },
        childNodes: element.childNodes.map(child => {
            if (child instanceof TypeElement) {
                return toJSON(child);
            }
            else {
                return {
                    className: 'TextNode',
                    nodeName: '#text',
                    nodeValue: child.nodeValue,
                };
            }
        })
    };
}
export function humpToMiddleLine(str) {
    return str.replace(/([A-Z])/g, '-$1').toLowerCase();
}
