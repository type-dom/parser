import { Subscription } from 'rxjs';
import { ITypeProperty } from '../type-element/type-element.interface';
import { INodeAttr, IPath, ITypeNode } from './type-node.interface';
export declare abstract class TypeNode implements ITypeNode {
    abstract className: string;
    abstract dom: HTMLElement | SVGElement | Text;
    abstract parent?: TypeNode;
    abstract render(): void;
    propObj?: ITypeProperty;
    nodeName: string;
    nodeValue?: string;
    childNodes?: TypeNode[];
    attributes?: INodeAttr[];
    events?: Subscription[];
    protected constructor(nodeName: string, nodeValue?: string);
    get firstChild(): TypeNode | undefined;
    get nextSibling(): TypeNode | undefined;
    get textContent(): string | number | boolean;
    get children(): TypeNode[];
    abstract setConfig(config: any): void;
    abstract createItem(parent: TypeNode, node: ITypeNode): TypeNode;
    setParent(parent: TypeNode): void;
    createItems(parent: TypeNode, nodes: ITypeNode[]): TypeNode[];
    hasChildNodes(): boolean;
    searchNode(paths: IPath[], pos: number): TypeNode | null;
    dump(buffer: string[]): void;
    toJSON(): ITypeNode;
}
