import { TypeNode } from '../type-node/type-node.abstract';
export class TextNode extends TypeNode {
    parent;
    className;
    nodeName;
    nodeValue;
    dom;
    constructor(parent, text = '') {
        super('#text', text);
        this.parent = parent;
        this.className = 'TextNode';
        this.nodeName = '#text';
        this.nodeValue = text;
        this.dom = document.createTextNode(text.toString());
    }
    get index() {
        return this.parent ? this.parent.findChildIndex(this) : -1;
    }
    get length() {
        return this.nodeValue.length;
    }
    setConfig(config) {
        this.setText(config.title);
    }
    setParent(parent) {
        this.parent = parent;
    }
    setText(text) {
        this.nodeValue = text;
        this.render();
    }
    appendText(content) {
        if (content === '') {
            return;
        }
        this.nodeValue = this.nodeValue.concat(content);
        this.parent.render();
    }
    sliceText(startOffset, endOffset = this.length) {
        if (startOffset >= endOffset) {
            return '';
        }
        return this.nodeValue.slice(startOffset, endOffset);
    }
    insertText(text, startOffset, endOffset = startOffset) {
        const content = this.nodeValue;
        const preContent = content.substring(0, startOffset);
        const endContent = content.substring(endOffset);
        const newContent = preContent.concat(text, endContent);
        this.setText(newContent);
        this.parent.render();
    }
    deleteText(startOffset, endOffset = startOffset) {
        if (startOffset === 0) {
            return;
        }
        let preContent;
        let endContent;
        if (startOffset === endOffset) {
            preContent = this.nodeValue.slice(0, startOffset - 1);
            endContent = this.nodeValue.slice(endOffset);
        }
        else {
            preContent = this.nodeValue.slice(0, startOffset);
            endContent = this.nodeValue.slice(endOffset);
        }
        const newContent = preContent.concat(endContent);
        this.setText(newContent);
        this.parent.render();
    }
    createItem(parent, node) {
        if (node.TypeClass === TextNode) {
            throw Error('node.TypeClass is TextNode . ');
        }
        const item = new TextNode(parent);
        console.log('item is ', item);
        item.setParent(parent);
        if (node.config && item.setConfig) {
            item.setConfig(node.config);
        }
        parent.addChild(item);
        if (node.nodeValue !== undefined) {
            if (item.nodeValue !== undefined) {
                item.nodeValue = node.nodeValue;
                return item;
            }
            else {
                throw Error('TypeClass is not TextNode, but nodeValue exist. ');
            }
        }
        return item;
    }
    render() {
        this.dom.textContent = this.nodeValue || '';
    }
}
